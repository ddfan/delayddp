# -*- coding: utf-8 -*-
"""
Created on Thu Jul 30 01:12:50 2015

@author: david
"""

import numpy as np
import cPickle as pickle
import gzip

from keras.models import model_from_json

def slice_data_by_delays(xudata,xdelay,xdim,udim,udelay):
    #break data up into input/output vectors
    num_trials=xudata.shape[1]-xdelay
    indim=xdim*xdelay+udim
    outdim=xdim
    x=np.zeros((num_trials,indim))
    y=np.zeros((num_trials,outdim))
    for i in xrange(num_trials):
        xslice=np.hstack([xudata[0:xdim,i:i+xdelay].reshape(xdim*xdelay), xudata[-udim:,i+xdelay-udelay-1]])
        yslice=xudata[0:xdim,i+xdelay]
        x[i,:]=xslice
        y[i,:]=yslice
    
    return x,y

def train_test_split(x,y):
    #split into test/train
    test_idx=np.random.choice(range(x.shape[0]),int(0.1*x.shape[0]),replace=False)
    X_test=x[test_idx,:]
    y_test=y[test_idx,:]
    np.delete(x,test_idx,0)
    np.delete(y,test_idx,0)
    X_train=x
    y_train=y
    
    return X_test,y_test,X_train,y_train
    
def prep_delay_data(dataprefix,xdelay,udelay,model=None,N=1):
    xudata,systeminfo=load_data("".join([dataprefix,"_data.p"]))
    xdim=systeminfo['xdim']
    udim=systeminfo['udim']
    
    x_inputdata,y_inputdata=slice_data_by_delays(xudata,xdelay,xdim,udim,udelay)
    
    if model is not None:
        #build array of sequence of states generated by model
        u=xudata[-udim:,:]
        x_inputdata_tmp=x_inputdata
        x_state=xudata[0:xdim,:-(xdelay+N)]
        for i in xrange(xdelay-1):
            x_state=np.dstack([x_state,xudata[0:xdim,i+1:-(xdelay+N)+i+1]])
        for i in xrange(N):
            x_inputdata_tmp=np.hstack([np.hstack(x_state[:,:,-xdelay:]),u[:,i:-(xdelay+N)+i].T])
            x_state=np.dstack([x_state,model.predict(x_inputdata_tmp).T])
        
        #take slices of data for each iteration of generated data
        for i in xrange(N):
            xudata_new=np.hstack([np.hstack(x_state[:,:,-xdelay-N+i+1:-N+i+1 or None]),u[:,xdelay-udelay+i:-udelay-N+i].T])
            x_inputdata=np.vstack([x_inputdata,xudata_new])
            y_inputdata=np.vstack([y_inputdata,xudata[0:xdim,i+xdelay:-N+i].T])

    xtest,ytest,xtrain,ytrain=train_test_split(x_inputdata,y_inputdata)
    return xtest,ytest,xtrain,ytrain,systeminfo

def save_data(data,filename):
    fp=gzip.open(filename,'wb')
    pickle.dump(data,fp)
    fp.close()
    
def load_data(filename):
    fp=gzip.open(filename)
    data=pickle.load(fp)
    fp.close()
    return data

def save_model(dataprefix,model,systeminfo):
    json_data=model.to_json()
    save_data(json_data, "".join([dataprefix,"_model.json"]) )
    save_data(systeminfo, "".join([dataprefix,"_model.info"]) )
    model.save_weights("".join([dataprefix,"_model_weights.w"]), overwrite=True)
    
def load_model(dataprefix):
    #load systeminfo
    systeminfo=load_data("".join([dataprefix,"_model.info"]))
    json_data=load_data("".join([dataprefix,"_model.json"]))
    model = model_from_json(json_data)
    model.load_weights("".join([dataprefix,"_model_weights.w"]))
    return model,systeminfo
